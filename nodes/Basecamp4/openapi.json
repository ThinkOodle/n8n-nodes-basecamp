{
  "openapi": "3.1.0",
  "info": {
    "title": "Basecamp API",
    "description": "Complete API Documentation for Basecamp",
    "version": "1.0.0",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://3.basecampapi.com"
    }
  ],
  "security": [
    {
      "oauth2": []
    }
  ],
  "paths": {
    "/attachments.json": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Create an attachment",
        "description": "Uploads a file and returns an attachable_sgid that can be used in other endpoints\n",
        "operationId": "createAttachment",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Name of the file being uploaded",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary",
                "description": "Raw binary data of the file"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to upload attachments"
          },
          "413": {
            "description": "Payload Too Large - File exceeds maximum size"
          },
          "415": {
            "description": "Unsupported Media Type - File type not supported"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/chats.json": {
      "get": {
        "tags": [
          "Campfires"
        ],
        "summary": "Get Campfires",
        "description": "Returns a paginated list of all active Campfires visible to the current user",
        "operationId": "getCampfires",
        "responses": {
          "200": {
            "description": "List of campfires",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campfire"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          }
        }
      }
    },
    "/buckets/{bucketId}/chats/{chatId}.json": {
      "get": {
        "tags": [
          "Campfires"
        ],
        "summary": "Get a Campfire",
        "description": "Returns the Campfire with the specified ID",
        "operationId": "getCampfire",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire"
          }
        ],
        "responses": {
          "200": {
            "description": "The campfire",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campfire"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this campfire"
          },
          "404": {
            "description": "Not Found - Specified campfire does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/chats/{chatId}/lines.json": {
      "get": {
        "tags": [
          "Campfires"
        ],
        "summary": "Get Campfire lines",
        "description": "Returns a paginated list of lines in the Campfire",
        "operationId": "getCampfireLines",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire"
          }
        ],
        "responses": {
          "200": {
            "description": "List of campfire lines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampfireLine"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this campfire"
          },
          "404": {
            "description": "Not Found - Specified campfire does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Campfires"
        ],
        "summary": "Create a Campfire line",
        "description": "Creates a new line in the Campfire",
        "operationId": "createCampfireLine",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampfireLine"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created campfire line",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampfireLine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to post to this campfire"
          },
          "404": {
            "description": "Not Found - Specified campfire does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/chats/{chatId}/lines/{lineId}.json": {
      "get": {
        "tags": [
          "Campfires"
        ],
        "summary": "Get a Campfire line",
        "description": "Returns a specific line in the Campfire",
        "operationId": "getCampfireLine",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire"
          },
          {
            "name": "lineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire line"
          }
        ],
        "responses": {
          "200": {
            "description": "The campfire line",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampfireLine"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this campfire line"
          },
          "404": {
            "description": "Not Found - Specified campfire line does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Campfires"
        ],
        "summary": "Delete a Campfire line",
        "description": "Deletes a specific line from the Campfire",
        "operationId": "deleteCampfireLine",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire"
          },
          {
            "name": "lineId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the campfire line"
          }
        ],
        "responses": {
          "204": {
            "description": "The campfire line was successfully deleted"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to delete this campfire line"
          },
          "404": {
            "description": "Not Found - Specified campfire line does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/{cardTableId}.json": {
      "get": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Get a card table",
        "description": "Returns a specific card table",
        "operationId": "getCardTable",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardTableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card table"
          }
        ],
        "responses": {
          "200": {
            "description": "Card table details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTable"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card table"
          },
          "404": {
            "description": "Not Found - Specified card table does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/columns/{columnId}/cards.json": {
      "get": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Get cards in a column",
        "description": "Returns a paginated list of cards in a specific column",
        "operationId": "getCardsInColumn",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the column"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cards in the column",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card"
          },
          "404": {
            "description": "Not Found - Specified card does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Create a card",
        "description": "Creates a new card in a specific column",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the column"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "due_on": {
                    "type": "string",
                    "format": "date"
                  },
                  "notify": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card"
          },
          "404": {
            "description": "Not Found - Specified card does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/cards/{cardId}.json": {
      "get": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Get a card",
        "description": "Returns details of a specific card",
        "operationId": "getCard",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card"
          }
        ],
        "responses": {
          "200": {
            "description": "Card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card"
          },
          "404": {
            "description": "Not Found - Specified card does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Update a card",
        "description": "Updates a specific card",
        "operationId": "updateCard",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "due_on": {
                    "type": "string",
                    "format": "date"
                  },
                  "assignee_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card"
          },
          "404": {
            "description": "Not Found - Specified card does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/cards/{cardId}/moves.json": {
      "post": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Move a card",
        "description": "Moves a card to a different column",
        "operationId": "moveCard",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "column_id"
                ],
                "properties": {
                  "column_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Card moved successfully"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this card"
          },
          "404": {
            "description": "Not Found - Specified card does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/columns/{columnId}.json": {
      "get": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Get a column",
        "description": "Returns a specific column in a card table",
        "operationId": "getColumn",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the column"
          }
        ],
        "responses": {
          "200": {
            "description": "The column details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this column"
          },
          "404": {
            "description": "Not Found - Specified column does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Update a column",
        "description": "Updates a specific column in a card table",
        "operationId": "updateColumn",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "columnId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the column"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated column",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this column"
          },
          "404": {
            "description": "Not Found - Specified column does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/{cardTableId}/columns.json": {
      "post": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Create a column",
        "description": "Creates a new column in a card table",
        "operationId": "createColumn",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardTableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card table"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created column",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create columns"
          },
          "404": {
            "description": "Not Found - Specified card table does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/card_tables/{cardTableId}/moves.json": {
      "post": {
        "tags": [
          "Card Tables"
        ],
        "summary": "Move a column",
        "description": "Moves a column to a new position in the card table",
        "operationId": "moveColumn",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "cardTableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the card table"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "source_id",
                  "target_id"
                ],
                "properties": {
                  "source_id": {
                    "type": "integer"
                  },
                  "target_id": {
                    "type": "integer"
                  },
                  "position": {
                    "type": "integer",
                    "default": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Column moved successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to move columns"
          },
          "404": {
            "description": "Not Found - Specified card table or column does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/chats/{chatId}/integrations.json": {
      "get": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "getChatbots",
        "summary": "Get all chatbots",
        "description": "Returns all the chatbots from the account with the line URL for the campfire on the specified basecamp.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          }
        ],
        "responses": {
          "200": {
            "description": "List of chatbots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chatbot"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "createChatbot",
        "summary": "Create a chatbot",
        "description": "Creates a chatbot on the account and returns the new chatbot with the lines URL from the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatbot"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created chatbot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chatbot"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/buckets/{bucketId}/chats/{chatId}/integrations/{integrationId}.json": {
      "get": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "getChatbot",
        "summary": "Get a chatbot",
        "description": "Returns the chatbot with the specified ID with the line URL from the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          },
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chatbot/integration"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested chatbot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chatbot"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "updateChatbot",
        "summary": "Update a chatbot",
        "description": "Allows changing the service name and commandURL of the specified chatbot in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          },
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chatbot/integration"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatbot"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated chatbot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chatbot"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - chatbot doesn't exist"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "deleteChatbot",
        "summary": "Delete a chatbot",
        "description": "Deletes the specified chatbot across the account.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          },
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chatbot/integration"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful deletion"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - chatbot doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/integrations/{chatbotKey}/buckets/{bucketId}/chats/{chatId}/lines.json": {
      "post": {
        "tags": [
          "Chatbots"
        ],
        "operationId": "createChatbotLine",
        "summary": "Create a chatbot line",
        "description": "Creates a line in the specified Campfire using the chatbot key.\n",
        "parameters": [
          {
            "name": "chatbotKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The key for the chatbot"
          },
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "chatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the chat/campfire"
          },
          {
            "name": "content_param",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Modifies the name of the required 'content' param to support webhooks from a third-party"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatbotLine"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created line"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/buckets/{bucketId}/client/approvals.json": {
      "get": {
        "tags": [
          "Client Approvals"
        ],
        "summary": "Get client approvals",
        "description": "Returns a paginated list of client approvals in the project",
        "operationId": "getClientApprovals",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of client approvals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientApproval"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/client/approvals/{approvalId}.json": {
      "get": {
        "tags": [
          "Client Approvals"
        ],
        "summary": "Get a client approval",
        "description": "Returns a specific client approval",
        "operationId": "getClientApproval",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "approvalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the client approval"
          }
        ],
        "responses": {
          "200": {
            "description": "The client approval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApproval"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this client approval"
          },
          "404": {
            "description": "Not Found - Specified client approval does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/client/correspondences.json": {
      "get": {
        "tags": [
          "Client Correspondences"
        ],
        "operationId": "getClientCorrespondences",
        "summary": "Get client correspondences",
        "description": "Returns a paginated list of client correspondences in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of client correspondences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientCorrespondence"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/client/correspondences/{correspondenceId}.json": {
      "get": {
        "tags": [
          "Client Correspondences"
        ],
        "operationId": "getClientCorrespondence",
        "summary": "Get a client correspondence",
        "description": "Returns the client correspondence with the specified ID in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "correspondenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the client correspondence"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested client correspondence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCorrespondence"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/client/recordings/{recordingId}/replies.json": {
      "get": {
        "tags": [
          "Client Replies"
        ],
        "operationId": "getClientReplies",
        "summary": "Get client replies",
        "description": "Returns a paginated list of client replies for the specified recording in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording (client correspondence or client approval)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of client replies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientReply"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/client/recordings/{recordingId}/replies/{replyId}.json": {
      "get": {
        "tags": [
          "Client Replies"
        ],
        "operationId": "getClientReply",
        "summary": "Get a client reply",
        "description": "Returns the client reply with the specified ID for the specified recording in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording (client correspondence or client approval)"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the client reply"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested client reply",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientReply"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/client_visibility.json": {
      "put": {
        "tags": [
          "Client Visibility"
        ],
        "operationId": "toggleClientVisibility",
        "summary": "Toggle client visibility",
        "description": "Changes the client visibility for the specified recording in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientVisibility"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The recording with updated visibility settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recording"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - recording doesn't control its client visibility"
          },
          "404": {
            "description": "Not found - recording doesn't exist"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/comments.json": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comments",
        "description": "Returns a list of comments for the specified recording",
        "operationId": "getComments",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified recording does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a comment",
        "description": "Creates a new comment on the specified recording",
        "operationId": "createComment",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "URL to the created comment",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create comments"
          },
          "404": {
            "description": "Not Found - Specified recording does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/comments/{commentId}.json": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get a comment",
        "description": "Returns details for a specific comment",
        "operationId": "getComment",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this comment"
          },
          "404": {
            "description": "Not Found - Specified comment does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a comment",
        "description": "Updates a specific comment",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the comment"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "URL to the comment",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this comment"
          },
          "404": {
            "description": "Not Found - Specified comment does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/vaults/{vaultId}/documents.json": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get documents",
        "description": "Returns a list of documents in the specified vault",
        "operationId": "getDocuments",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create a document",
        "description": "Creates a new document in the specified vault",
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocument"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create documents"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/documents/{documentId}.json": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get a document",
        "description": "Returns details for a specific document",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the document"
          }
        ],
        "responses": {
          "200": {
            "description": "Document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this document"
          },
          "404": {
            "description": "Not Found - Specified document does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Update a document",
        "description": "Updates a specific document",
        "operationId": "updateDocument",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the document"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this document"
          },
          "404": {
            "description": "Not Found - Specified document does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/events.json": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEvents",
        "summary": "Get events",
        "description": "Returns a paginated list of events for the specified recording in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - resource doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/inboxes/{inboxId}/forwards.json": {
      "get": {
        "tags": [
          "Forwards"
        ],
        "summary": "Get forwards",
        "description": "Returns a paginated list of active forwards in the specified inbox",
        "operationId": "getForwards",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "inboxId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the inbox"
          }
        ],
        "responses": {
          "200": {
            "description": "List of forwards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forward"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified inbox does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/inbox_forwards/{forwardId}.json": {
      "get": {
        "tags": [
          "Forwards"
        ],
        "summary": "Get a forward",
        "description": "Returns a specific forward",
        "operationId": "getForward",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "forwardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the forward"
          }
        ],
        "responses": {
          "200": {
            "description": "The forward",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forward"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this forward"
          },
          "404": {
            "description": "Not Found - Specified forward does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/inbox_forwards/{forwardId}/replies.json": {
      "get": {
        "tags": [
          "Inbox Replies"
        ],
        "summary": "Get inbox replies",
        "description": "Returns a paginated list of inbox replies for a forward",
        "operationId": "getInboxReplies",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "forwardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the forward"
          }
        ],
        "responses": {
          "200": {
            "description": "List of inbox replies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InboxReply"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified forward does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/inbox_forwards/{forwardId}/replies/{replyId}.json": {
      "get": {
        "tags": [
          "Inbox Replies"
        ],
        "summary": "Get an inbox reply",
        "description": "Returns a specific inbox reply",
        "operationId": "getInboxReply",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "forwardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the forward"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the reply"
          }
        ],
        "responses": {
          "200": {
            "description": "The inbox reply",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxReply"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this inbox reply"
          },
          "404": {
            "description": "Not Found - Specified inbox reply does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/inboxes/{inboxId}.json": {
      "get": {
        "tags": [
          "Inboxes"
        ],
        "summary": "Get inbox",
        "description": "Returns the inbox for the specified project",
        "operationId": "getInbox",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "inboxId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the inbox"
          }
        ],
        "responses": {
          "200": {
            "description": "The inbox",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inbox"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this inbox"
          },
          "404": {
            "description": "Not Found - Specified inbox does not exist"
          }
        }
      }
    },
    "/lineup/markers.json": {
      "post": {
        "tags": [
          "Lineup Markers"
        ],
        "operationId": "createLineupMarker",
        "summary": "Create a marker",
        "description": "Creates an account-wide marker that shows up in the Lineup.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLineupMarker"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - empty response body"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/lineup/markers/{markerId}.json": {
      "put": {
        "tags": [
          "Lineup Markers"
        ],
        "operationId": "updateLineupMarker",
        "summary": "Update a marker",
        "description": "Changes the name and/or date of the specified marker.\n",
        "parameters": [
          {
            "name": "markerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the marker"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLineupMarker"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - empty response body"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - marker doesn't exist"
          },
          "422": {
            "description": "Unprocessable entity - validation failed"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Lineup Markers"
        ],
        "operationId": "deleteLineupMarker",
        "summary": "Delete a marker",
        "description": "Permanently destroys the specified marker immediately.\n",
        "parameters": [
          {
            "name": "markerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the marker"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful deletion"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - marker doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/buckets/{bucketId}/message_boards/{messageBoardId}.json": {
      "get": {
        "tags": [
          "Message Boards"
        ],
        "summary": "Get message board",
        "description": "Returns the message board for the specified project",
        "operationId": "getMessageBoard",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "messageBoardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message board"
          }
        ],
        "responses": {
          "200": {
            "description": "The message board",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageBoard"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this message board"
          },
          "404": {
            "description": "Not Found - Specified message board does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/categories.json": {
      "get": {
        "tags": [
          "Message Types"
        ],
        "summary": "Get message types",
        "description": "Returns all message types in the specified project",
        "operationId": "getMessageTypes",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of message types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Message Types"
        ],
        "summary": "Create a message type",
        "description": "Creates a new message type in the specified project",
        "operationId": "createMessageType",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created message type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageType"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create message types"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/categories/{categoryId}.json": {
      "get": {
        "tags": [
          "Message Types"
        ],
        "summary": "Get a message type",
        "description": "Returns a specific message type",
        "operationId": "getMessageType",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message type (category)"
          }
        ],
        "responses": {
          "200": {
            "description": "The message type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageType"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this message type"
          },
          "404": {
            "description": "Not Found - Specified message type does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Message Types"
        ],
        "summary": "Update a message type",
        "description": "Updates a specific message type",
        "operationId": "updateMessageType",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message type (category)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated message type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageType"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this message type"
          },
          "404": {
            "description": "Not Found - Specified message type does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      },
      "delete": {
        "tags": [
          "Message Types"
        ],
        "summary": "Destroy a message type",
        "description": "Deletes a specific message type",
        "operationId": "destroyMessageType",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message type (category)"
          }
        ],
        "responses": {
          "204": {
            "description": "Message type successfully deleted"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to delete this message type"
          },
          "404": {
            "description": "Not Found - Specified message type does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/message_boards/{messageBoardId}/messages.json": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get messages",
        "description": "Returns a list of messages in the specified message board",
        "operationId": "getMessages",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "messageBoardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message board"
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified message board does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Create a message",
        "description": "Creates a new message in the specified message board",
        "operationId": "createMessage",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "messageBoardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message board"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create messages"
          },
          "404": {
            "description": "Not Found - Specified message board does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/messages/{messageId}.json": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get a message",
        "description": "Returns details for a specific message",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message"
          }
        ],
        "responses": {
          "200": {
            "description": "Message details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this message"
          },
          "404": {
            "description": "Not Found - Specified message does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Messages"
        ],
        "summary": "Update a message",
        "description": "Updates a specific message",
        "operationId": "updateMessage",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the message"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this message"
          },
          "404": {
            "description": "Not Found - Specified message does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/people.json": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get people",
        "description": "Returns a list of all people visible to the current user",
        "operationId": "getPeople",
        "responses": {
          "200": {
            "description": "List of people",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this resource"
          }
        }
      }
    },
    "/people/{personId}.json": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get a person",
        "description": "Returns the profile information for a specific person",
        "operationId": "getPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this resource"
          },
          "404": {
            "description": "Not Found - Specified person does not exist"
          }
        }
      }
    },
    "/my/profile.json": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get my profile",
        "description": "Returns the profile of the current user",
        "operationId": "getMyProfile",
        "responses": {
          "200": {
            "description": "Current user's profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          }
        }
      }
    },
    "/projects/{projectId}/people.json": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get people on a project",
        "description": "Returns a list of people with access to a specific project",
        "operationId": "getProjectPeople",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of people on the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this project"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      }
    },
    "/projects/{projectId}/people/users.json": {
      "put": {
        "tags": [
          "People"
        ],
        "summary": "Manage people on a project",
        "description": "Grant and revoke people's access to a project",
        "operationId": "manageProjectUsers",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeopleAccessUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of access changes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to manage this project"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      }
    },
    "/my/company/people.json": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Get people in my company/firm",
        "description": "Returns a list of people in the current user's company/firm",
        "operationId": "getCompanyPeople",
        "responses": {
          "200": {
            "description": "List of people in the company/firm",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Person"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access company resources"
          }
        }
      }
    },
    "/projects.json": {
      "get": {
        "summary": "Get projects",
        "operationId": "getProjects",
        "description": "Returns a list of active projects visible to the current user",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by project status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "archived",
                "trashed"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "operationId": "createProject",
        "description": "Creates a new project",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create projects"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/projects/{projectId}.json": {
      "get": {
        "summary": "Get a project",
        "operationId": "getProject",
        "description": "Returns details for a specific project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this project"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      },
      "put": {
        "summary": "Update a project",
        "operationId": "updateProject",
        "description": "Updates a specific project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this project"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      },
      "delete": {
        "summary": "Trash a project",
        "operationId": "trashProject",
        "description": "Marks a project as trashed",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project successfully trashed"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to trash this project"
          },
          "404": {
            "description": "Not Found - Specified project does not exist"
          }
        }
      }
    },
    "/projects/recordings.json": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "operationId": "getRecordings",
        "summary": "Get recordings",
        "description": "Returns a paginated list of recordings for the given type.\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Comment",
                "Document",
                "Message",
                "Question::Answer",
                "Schedule::Entry",
                "Todo",
                "Todolist",
                "Upload",
                "Vault"
              ]
            },
            "description": "The type of recording to retrieve"
          },
          {
            "name": "bucket",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Single or comma separated list of project IDs. Default is all active projects visible to the current user."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "archived",
                "trashed"
              ],
              "default": "active"
            },
            "description": "The status of recordings to retrieve"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            },
            "description": "The field to sort by"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "description": "The sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "List of recordings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recording"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/questions/{questionId}/answers.json": {
      "get": {
        "tags": [
          "Question Answers"
        ],
        "summary": "Get question answers",
        "description": "Returns a paginated list of answers to a specific question",
        "operationId": "getQuestionAnswers",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the question"
          }
        ],
        "responses": {
          "200": {
            "description": "List of answers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionAnswer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified question does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/question_answers/{answerId}.json": {
      "get": {
        "tags": [
          "Question Answers"
        ],
        "summary": "Get a question answer",
        "description": "Returns a specific answer to a question",
        "operationId": "getQuestionAnswer",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "answerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the answer"
          }
        ],
        "responses": {
          "200": {
            "description": "The answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionAnswer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this answer"
          },
          "404": {
            "description": "Not Found - Specified answer does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/questionnaires/{questionnaireId}.json": {
      "get": {
        "tags": [
          "Questionnaires"
        ],
        "summary": "Get questionnaire",
        "description": "Returns the questionnaire for the project",
        "operationId": "getQuestionnaire",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionnaireId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the questionnaire"
          }
        ],
        "responses": {
          "200": {
            "description": "The questionnaire",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Questionnaire"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this questionnaire"
          },
          "404": {
            "description": "Not Found - Specified questionnaire does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/questionnaires/{questionnaireId}/questions.json": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get questions",
        "description": "Returns a paginated list of questions in the questionnaire",
        "operationId": "getQuestions",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionnaireId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the questionnaire"
          }
        ],
        "responses": {
          "200": {
            "description": "List of questions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified questionnaire does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create a question",
        "description": "Creates a new question in the questionnaire",
        "operationId": "createQuestion",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionnaireId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the questionnaire"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create questions"
          },
          "404": {
            "description": "Not Found - Specified questionnaire does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/questions/{questionId}.json": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get a question",
        "description": "Returns a specific question",
        "operationId": "getQuestion",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the question"
          }
        ],
        "responses": {
          "200": {
            "description": "The question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this question"
          },
          "404": {
            "description": "Not Found - Specified question does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Questions"
        ],
        "summary": "Update a question",
        "description": "Updates a specific question",
        "operationId": "updateQuestion",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "questionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the question"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this question"
          },
          "404": {
            "description": "Not Found - Specified question does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/status/trashed.json": {
      "put": {
        "tags": [
          "Recordings"
        ],
        "operationId": "trashRecording",
        "summary": "Trash a recording",
        "description": "Marks the specified recording as trashed in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful trash operation"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - recording doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/status/archived.json": {
      "put": {
        "tags": [
          "Recordings"
        ],
        "operationId": "archiveRecording",
        "summary": "Archive a recording",
        "description": "Marks the specified recording as archived in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful archive operation"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - recording doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/recordings/{recordingId}/status/active.json": {
      "put": {
        "tags": [
          "Recordings"
        ],
        "operationId": "unarchiveRecording",
        "summary": "Unarchive a recording",
        "description": "Marks the specified recording as active in the specified project.\n",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "recordingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the recording"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful unarchive operation"
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - recording doesn't exist"
          },
          "429": {
            "description": "Too many requests - rate limit exceeded"
          }
        }
      }
    },
    "/buckets/{bucketId}/schedules/{scheduleId}.json": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get schedule",
        "description": "Returns the schedule for a project",
        "operationId": "getSchedule",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this schedule"
          },
          "404": {
            "description": "Not Found - Specified schedule does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Schedules"
        ],
        "summary": "Update a schedule",
        "description": "Updates a project's schedule settings",
        "operationId": "updateSchedule",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "include_due_assignments"
                ],
                "properties": {
                  "include_due_assignments": {
                    "type": "boolean",
                    "description": "Whether the schedule should include due dates from to-dos, cards and steps"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this schedule"
          },
          "404": {
            "description": "Not Found - Specified schedule does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/schedules/{scheduleId}/entries.json": {
      "get": {
        "tags": [
          "Schedule Entries"
        ],
        "summary": "Get schedule entries",
        "description": "Returns a list of entries in the specified schedule",
        "operationId": "getScheduleEntries",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "upcoming",
                "past"
              ]
            },
            "description": "Filter entries by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of schedule entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified schedule does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Schedule Entries"
        ],
        "summary": "Create a schedule entry",
        "description": "Creates a new entry in the specified schedule",
        "operationId": "createScheduleEntry",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleEntry"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created schedule entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create schedule entries"
          },
          "404": {
            "description": "Not Found - Specified schedule does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/schedule_entries/{entryId}.json": {
      "get": {
        "tags": [
          "Schedule Entries"
        ],
        "summary": "Get a schedule entry",
        "description": "Returns details for a specific schedule entry",
        "operationId": "getScheduleEntry",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule entry"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule entry details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this schedule entry"
          },
          "404": {
            "description": "Not Found - Specified schedule entry does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Schedule Entries"
        ],
        "summary": "Update a schedule entry",
        "description": "Updates a specific schedule entry",
        "operationId": "updateScheduleEntry",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule entry"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated schedule entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this schedule entry"
          },
          "404": {
            "description": "Not Found - Specified schedule entry does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/schedule_entries/{entryId}/occurrences/{date}.json": {
      "get": {
        "tags": [
          "Schedule Entries"
        ],
        "summary": "Get a schedule entry occurrence",
        "description": "Returns details for a specific schedule entry occurrence on a date",
        "operationId": "getScheduleEntryOccurrence",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "entryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the schedule entry"
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2022-05-01"
            },
            "description": "The date of the occurrence (YYYY-MM-DD)"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule entry occurrence details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleEntry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this schedule entry occurrence"
          },
          "404": {
            "description": "Not Found - Specified schedule entry occurrence does not exist"
          }
        }
      }
    },
    "/templates.json": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get templates",
        "description": "Returns a paginated list of active Templates visible to the current user",
        "operationId": "getTemplates",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter templates by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "archived",
                "trashed"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          }
        }
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create a template",
        "description": "Creates a new template",
        "operationId": "createTemplate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create templates"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          },
          "507": {
            "description": "Account project/team limit reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{templateId}.json": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get a template",
        "description": "Returns details of a specific template",
        "operationId": "getTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this template"
          },
          "404": {
            "description": "Not Found - Specified template does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Update a template",
        "description": "Updates a specific template",
        "operationId": "updateTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this template"
          },
          "404": {
            "description": "Not Found - Specified template does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Trash a template",
        "description": "Marks a template as trashed",
        "operationId": "trashTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template trashed successfully"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to trash this template"
          },
          "404": {
            "description": "Not Found - Specified template does not exist"
          }
        }
      }
    },
    "/templates/{templateId}/project_constructions.json": {
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create a project construction",
        "description": "Creates a new project from a template",
        "operationId": "createProjectConstruction",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "project"
                ],
                "properties": {
                  "project": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project construction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectConstruction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create projects"
          },
          "404": {
            "description": "Not Found - Specified template does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todolists/{todolistId}/groups.json": {
      "get": {
        "tags": [
          "Todolist Groups"
        ],
        "summary": "List to-do list groups",
        "description": "Returns a paginated list of active groups in the to-do list",
        "operationId": "getTodolistGroups",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "archived",
                "trashed"
              ]
            },
            "description": "Filter by to-do list group status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of to-do list groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todolist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Todolist Groups"
        ],
        "summary": "Create a to-do list group",
        "description": "Creates a to-do group within the specified to-do list",
        "operationId": "createTodolistGroup",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the to-do list group"
                  },
                  "color": {
                    "type": "string",
                    "enum": [
                      "white",
                      "red",
                      "orange",
                      "yellow",
                      "green",
                      "blue",
                      "aqua",
                      "purple",
                      "gray",
                      "pink",
                      "brown"
                    ],
                    "description": "The color of the to-do list group"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created to-do list group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create to-do list groups"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todolists/groups/{groupId}/position.json": {
      "put": {
        "tags": [
          "Todolist Groups"
        ],
        "summary": "Reposition a to-do list group",
        "description": "Changes the position of the to-do list group",
        "operationId": "repositionTodolistGroup",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "position"
                ],
                "properties": {
                  "position": {
                    "type": "integer",
                    "description": "The new position for the to-do list group",
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "To-do list group position updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this to-do list group"
          },
          "404": {
            "description": "Not Found - Specified to-do list group does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todosets/{todosetId}/todolists.json": {
      "get": {
        "tags": [
          "Todolists"
        ],
        "summary": "Get to-do lists",
        "description": "Returns a list of to-do lists in the specified project",
        "operationId": "getTodolists",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todosetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do set"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "archived",
                "trashed",
                "active"
              ]
            },
            "description": "Filter to-do lists by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of to-do lists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todolist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified to-do set does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Todolists"
        ],
        "summary": "Create a to-do list",
        "description": "Creates a new to-do list in the specified project",
        "operationId": "createTodolist",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todosetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do set"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodolist"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created to-do list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create to-do lists"
          },
          "404": {
            "description": "Not Found - Specified to-do set does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todolists/{todolistId}.json": {
      "get": {
        "tags": [
          "Todolists"
        ],
        "summary": "Get a to-do list",
        "description": "Returns details for a specific to-do list",
        "operationId": "getTodolist",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          }
        ],
        "responses": {
          "200": {
            "description": "To-do list details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this to-do list"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Todolists"
        ],
        "summary": "Update a to-do list",
        "description": "Updates a specific to-do list",
        "operationId": "updateTodolist",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodolist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated to-do list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todolist"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this to-do list"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      },
      "delete": {
        "tags": [
          "Todolists"
        ],
        "summary": "Trash a to-do list",
        "description": "Marks the to-do list with the given ID as trashed",
        "operationId": "trashTodolist",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          }
        ],
        "responses": {
          "204": {
            "description": "The to-do list was successfully trashed"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to trash this to-do list"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/todolists/{todolistId}/todos.json": {
      "get": {
        "tags": [
          "Todos"
        ],
        "summary": "Get to-dos",
        "description": "Returns a list of to-dos in the specified to-do list",
        "operationId": "getTodos",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          },
          {
            "name": "completed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter todos by completion status"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Page number for paginated results"
          }
        ],
        "responses": {
          "200": {
            "description": "List of to-dos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Todos"
        ],
        "summary": "Create a to-do",
        "description": "Creates a new to-do in the specified to-do list",
        "operationId": "createTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todolistId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do list"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created to-do",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create to-dos"
          },
          "404": {
            "description": "Not Found - Specified to-do list does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todos/{todoId}.json": {
      "get": {
        "tags": [
          "Todos"
        ],
        "summary": "Get a to-do",
        "description": "Returns details for a specific to-do",
        "operationId": "getTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do"
          }
        ],
        "responses": {
          "200": {
            "description": "To-do details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this to-do"
          },
          "404": {
            "description": "Not Found - Specified to-do does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Todos"
        ],
        "summary": "Update a to-do",
        "description": "Updates a specific to-do",
        "operationId": "updateTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated to-do",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this to-do"
          },
          "404": {
            "description": "Not Found - Specified to-do does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todos/{todoId}/completion.json": {
      "post": {
        "tags": [
          "Todos"
        ],
        "summary": "Complete a to-do",
        "description": "Marks a to-do as completed",
        "operationId": "completeTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do"
          }
        ],
        "responses": {
          "204": {
            "description": "The to-do was successfully completed"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to complete this to-do"
          },
          "404": {
            "description": "Not Found - Specified to-do does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Todos"
        ],
        "summary": "Uncomplete a to-do",
        "description": "Marks a to-do as uncompleted",
        "operationId": "uncompleteTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do"
          }
        ],
        "responses": {
          "204": {
            "description": "The to-do was successfully uncompleted"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to uncomplete this to-do"
          },
          "404": {
            "description": "Not Found - Specified to-do does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/todos/{todoId}/position.json": {
      "put": {
        "tags": [
          "Todos"
        ],
        "summary": "Reposition a to-do",
        "description": "Changes the position of a to-do within its parent list",
        "operationId": "repositionTodo",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoPosition"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The to-do was successfully repositioned"
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to reposition this to-do"
          },
          "404": {
            "description": "Not Found - Specified to-do does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/todosets/{todosetId}.json": {
      "get": {
        "tags": [
          "Todosets"
        ],
        "summary": "Get to-do set",
        "description": "Returns the to-do set for the specified project",
        "operationId": "getTodoset",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "todosetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the to-do set"
          }
        ],
        "responses": {
          "200": {
            "description": "The to-do set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todoset"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this to-do set"
          },
          "404": {
            "description": "Not Found - Specified to-do set does not exist"
          }
        }
      }
    },
    "/buckets/{bucketId}/vaults/{vaultId}/uploads.json": {
      "get": {
        "tags": [
          "Uploads"
        ],
        "summary": "Get uploads",
        "description": "Returns a list of uploads in the specified vault",
        "operationId": "getUploads",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "responses": {
          "200": {
            "description": "List of uploads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Upload"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Uploads"
        ],
        "summary": "Create an upload",
        "description": "Creates a new upload in the specified vault",
        "operationId": "createUpload",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create uploads"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/uploads/{uploadId}.json": {
      "get": {
        "tags": [
          "Uploads"
        ],
        "summary": "Get an upload",
        "description": "Returns details for a specific upload",
        "operationId": "getUpload",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the upload"
          }
        ],
        "responses": {
          "200": {
            "description": "Upload details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this upload"
          },
          "404": {
            "description": "Not Found - Specified upload does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Uploads"
        ],
        "summary": "Update an upload",
        "description": "Updates a specific upload",
        "operationId": "updateUpload",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the upload"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUpload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this upload"
          },
          "404": {
            "description": "Not Found - Specified upload does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/vaults/{vaultId}/vaults.json": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "summary": "Get vaults",
        "description": "Returns a list of vaults in the specified vault (folder)",
        "operationId": "getVaults",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the parent vault"
          }
        ],
        "responses": {
          "200": {
            "description": "List of vaults",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vault"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access these resources"
          },
          "404": {
            "description": "Not Found - Specified parent vault does not exist"
          }
        }
      },
      "post": {
        "tags": [
          "Vaults"
        ],
        "summary": "Create a vault",
        "description": "Creates a new vault in the specified parent vault",
        "operationId": "createVault",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the parent vault"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVault"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created vault",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create vaults"
          },
          "404": {
            "description": "Not Found - Specified parent vault does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/vaults/{vaultId}.json": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "summary": "Get a vault",
        "description": "Returns details for a specific vault",
        "operationId": "getVault",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "responses": {
          "200": {
            "description": "Vault details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to access this vault"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "Vaults"
        ],
        "summary": "Update a vault",
        "description": "Updates a specific vault",
        "operationId": "updateVault",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "vaultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the vault"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVault"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated vault",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to update this vault"
          },
          "404": {
            "description": "Not Found - Specified vault does not exist"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          }
        }
      }
    },
    "/buckets/{bucketId}/webhooks.json": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhooks",
        "description": "Returns a list of webhooks in the specified project",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "description": "Creates a new webhook in the specified project",
        "operationId": "createWebhook",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Authentication is required"
          },
          "403": {
            "description": "Forbidden - Not permitted to create webhooks"
          },
          "404": {
            "description": "Project not found"
          },
          "422": {
            "description": "Unprocessable entity (validation failed)"
          },
          "507": {
            "description": "Account webhook limit reached"
          }
        }
      }
    },
    "/buckets/{bucketId}/webhooks/{webhookId}.json": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook",
        "description": "Returns details for a specific webhook including recent deliveries",
        "operationId": "getWebhook",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the webhook"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookWithDeliveries"
                }
              }
            }
          },
          "404": {
            "description": "Webhook or project not found"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "description": "Updates a specific webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the webhook"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook or project not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Permanently deletes a webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "bucketId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project (bucket)"
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the webhook"
          }
        ],
        "responses": {
          "204": {
            "description": "The webhook was successfully deleted"
          },
          "404": {
            "description": "Webhook or project not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth 2.0 authorization",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://launchpad.37signals.com/authorization/new",
            "tokenUrl": "https://launchpad.37signals.com/authorization/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the person"
          },
          "attachable_sgid": {
            "type": "string",
            "description": "A secure global ID for the person"
          },
          "name": {
            "type": "string",
            "description": "Name of the person"
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the person"
          },
          "personable_type": {
            "type": "string",
            "description": "Type of the person (e.g., User, Client)"
          },
          "title": {
            "type": "string",
            "description": "Job title of the person"
          },
          "bio": {
            "type": "string",
            "description": "Short biography of the person"
          },
          "location": {
            "type": "string",
            "description": "Location of the person"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of when the person was created",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of when the person was last updated",
            "format": "date-time"
          },
          "admin": {
            "type": "boolean",
            "description": "Indicates if the person is an admin"
          },
          "owner": {
            "type": "boolean",
            "description": "Indicates if the person is the owner"
          },
          "client": {
            "type": "boolean",
            "description": "Indicates if the person is a client"
          },
          "employee": {
            "type": "boolean",
            "description": "Indicates if the person is an employee"
          },
          "time_zone": {
            "type": "string",
            "description": "Person's time zone"
          },
          "avatar_url": {
            "type": "string",
            "description": "URL to the person's avatar image"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "can_manage_projects": {
            "type": "boolean",
            "description": "Indicates if the person can manage projects"
          },
          "can_manage_people": {
            "type": "boolean",
            "description": "Indicates if the person can manage people"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the company"
          },
          "name": {
            "type": "string",
            "description": "Name of the company"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the project."
          },
          "name": {
            "type": "string",
            "description": "Name of the project."
          },
          "description": {
            "type": "string",
            "description": "Optional description of the project."
          },
          "status": {
            "type": "string",
            "description": "Status of the project.",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was last updated."
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the project."
          },
          "clients_enabled": {
            "type": "boolean",
            "description": "Whether clients are enabled for this project."
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to bookmark the project."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "API URL for the project."
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "Web application URL for the project."
          },
          "dock": {
            "type": "array",
            "description": "Project tools and their configuration",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "position": {
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "app_url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "Bucket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Inbox": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Inbox"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "forwards_count": {
            "type": "integer"
          },
          "forwards_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "Forward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Inbox::Forward"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Inbox"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "replies_count": {
            "type": "integer"
          },
          "replies_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "InboxReply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Inbox::Reply"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Inbox::Forward"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "MessageBoard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Message::Board"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "messages_count": {
            "type": "integer"
          },
          "messages_url": {
            "type": "string",
            "format": "uri"
          },
          "app_messages_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "MessageType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "icon"
        ]
      },
      "CreateMessageType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the message type"
          },
          "icon": {
            "type": "string",
            "description": "The emoji icon to use for the message type"
          }
        },
        "required": [
          "name",
          "icon"
        ]
      },
      "UpdateMessageType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the message type"
          },
          "icon": {
            "type": "string",
            "description": "The emoji icon to use for the message type"
          }
        }
      },
      "Todoset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Todoset"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "completed": {
            "type": "boolean"
          },
          "completed_ratio": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "todolists_count": {
            "type": "integer"
          },
          "todolists_url": {
            "type": "string",
            "format": "uri"
          },
          "app_todoslists_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "Campfire": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Chat::Transcript"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "topic": {
            "type": "string"
          },
          "lines_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "status",
          "title",
          "type"
        ]
      },
      "CampfireLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Chat::Lines::Text"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Chat::Transcript"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "content",
          "type"
        ]
      },
      "Todolist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the todolist."
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "Status of the todolist."
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the todolist is visible to clients."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the todolist was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the todolist was last updated."
          },
          "title": {
            "type": "string",
            "description": "Title of the todolist."
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the todolist inherits status from its parent."
          },
          "type": {
            "type": "string",
            "description": "Type identifier of the resource.",
            "enum": [
              "Todolist"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todolist via the API."
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todolist in the Basecamp web app."
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to bookmark the todolist."
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todolist subscription."
          },
          "comments_count": {
            "type": "integer",
            "description": "Number of comments on the todolist."
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todolist comments."
          },
          "position": {
            "type": "integer",
            "description": "Position of the todolist relative to other todolists."
          },
          "parent": {
            "type": "object",
            "description": "Parent todoset information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Todoset"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "description": "Project information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": "string",
            "description": "Description of the todolist. May contain HTML."
          },
          "completed": {
            "type": "boolean",
            "description": "Whether all todos in the todolist are completed."
          },
          "completed_ratio": {
            "type": "string",
            "description": "Ratio of completed todos to total todos."
          },
          "name": {
            "type": "string",
            "description": "Name of the todolist (same as title)."
          },
          "todos_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todos in the todolist."
          },
          "groups_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the groups in the todolist."
          },
          "app_todos_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todos in the web app."
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "CreateTodolist": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the todolist.",
            "example": "Launch"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the todolist. May contain HTML.",
            "example": "<div><em>Finish it!</em></div>"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateTodolist": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the todolist.",
            "example": "Relaunch"
          },
          "description": {
            "type": "string",
            "description": "Description of the todolist. May contain HTML.",
            "example": "<div><strong>Try this again.</strong></div>"
          }
        },
        "required": [
          "name"
        ]
      },
      "Todo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the todo."
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "Status of the todo."
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the todo is visible to clients."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the todo was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the todo was last updated."
          },
          "title": {
            "type": "string",
            "description": "Title of the todo."
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the todo inherits status from its parent."
          },
          "type": {
            "type": "string",
            "description": "Type identifier of the resource.",
            "enum": [
              "Todo"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todo via the API."
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todo in the Basecamp web app."
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to bookmark the todo."
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todo subscription."
          },
          "comments_count": {
            "type": "integer",
            "description": "Number of comments on the todo."
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the todo comments."
          },
          "position": {
            "type": "integer",
            "description": "Position of the todo relative to other todos in the list."
          },
          "parent": {
            "type": "object",
            "description": "Parent todolist information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Todolist"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "description": "Project information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo. May contain HTML."
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the todo is completed."
          },
          "completion": {
            "type": "object",
            "description": "Information about the completion status.",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the todo was completed."
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              }
            }
          },
          "content": {
            "type": "string",
            "description": "The content/title of the todo."
          },
          "starts_on": {
            "type": [
              "string",
              "null"
            ],
            "format": "date",
            "description": "The date when the todo starts."
          },
          "due_on": {
            "type": [
              "string",
              "null"
            ],
            "format": "date",
            "description": "The due date for the todo."
          },
          "assignees": {
            "type": "array",
            "description": "People assigned to this todo.",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "completion_subscribers": {
            "type": "array",
            "description": "People subscribed to be notified when this todo is completed.",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "completion_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to complete or uncomplete the todo."
          }
        },
        "required": [
          "id",
          "content",
          "status",
          "type"
        ]
      },
      "CreateTodo": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content/title of the todo.",
            "example": "Program it"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the todo. May contain HTML.",
            "example": "<div><em>Try that new language!</em></div>"
          },
          "assignee_ids": {
            "type": "array",
            "description": "IDs of people to assign to this todo.",
            "items": {
              "type": "integer"
            }
          },
          "completion_subscriber_ids": {
            "type": "array",
            "description": "IDs of people to notify when this todo is completed.",
            "items": {
              "type": "integer"
            }
          },
          "notify": {
            "type": "boolean",
            "description": "Whether to notify assignees about being assigned.",
            "default": false
          },
          "due_on": {
            "type": "string",
            "format": "date",
            "description": "The due date for the todo.",
            "example": "2016-05-01"
          },
          "starts_on": {
            "type": "string",
            "format": "date",
            "description": "The date when the todo starts."
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateTodo": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content/title of the todo.",
            "example": "Only changing content! Passing the rest to preserve them."
          },
          "description": {
            "type": "string",
            "description": "Description of the todo. May contain HTML.",
            "example": "<div><em>Try that new language!</em></div>"
          },
          "assignee_ids": {
            "type": "array",
            "description": "IDs of people to assign to this todo.",
            "items": {
              "type": "integer"
            }
          },
          "completion_subscriber_ids": {
            "type": "array",
            "description": "IDs of people to notify when this todo is completed.",
            "items": {
              "type": "integer"
            }
          },
          "notify": {
            "type": "boolean",
            "description": "Whether to notify assignees about being assigned.",
            "default": false
          },
          "due_on": {
            "type": "string",
            "format": "date",
            "description": "The due date for the todo.",
            "example": "2016-05-01"
          },
          "starts_on": {
            "type": "string",
            "format": "date",
            "description": "The date when the todo starts."
          }
        },
        "required": [
          "content"
        ]
      },
      "TodoPosition": {
        "type": "object",
        "properties": {
          "position": {
            "type": "integer",
            "description": "The new position for the todo (1-based).",
            "minimum": 1,
            "example": 3
          }
        },
        "required": [
          "position"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the comment."
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "Status of the comment."
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the comment is visible to clients."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the comment was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the comment was last updated."
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the comment inherits status from its parent."
          },
          "type": {
            "type": "string",
            "description": "Type identifier of the resource.",
            "enum": [
              "Comment"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the comment via the API."
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the comment in the Basecamp web app."
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to bookmark the comment."
          },
          "parent": {
            "type": "object",
            "description": "Parent recording information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "description": "Project information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string",
            "description": "The content of the comment. May contain HTML."
          }
        },
        "required": [
          "id",
          "content",
          "status",
          "type"
        ]
      },
      "CreateComment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment. May contain HTML.",
            "example": "<div><em>Wow!</em> That is cool.</div>"
          }
        },
        "required": [
          "content"
        ]
      },
      "UpdateComment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment. May contain HTML.",
            "example": "<div><em>No way!</em> That isn't cool at all.</div>"
          }
        },
        "required": [
          "content"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the message."
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "Status of the message."
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the message is visible to clients."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was last updated."
          },
          "title": {
            "type": "string",
            "description": "Title of the message."
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the message inherits status from its parent."
          },
          "type": {
            "type": "string",
            "description": "Type identifier of the resource.",
            "enum": [
              "Message"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the message via the API."
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the message in the Basecamp web app."
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to bookmark the message."
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the message subscription."
          },
          "comments_count": {
            "type": "integer",
            "description": "Number of comments on the message."
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access the message comments."
          },
          "parent": {
            "type": "object",
            "description": "Parent message board information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Message::Board"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "description": "Project information.",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string",
            "description": "The content of the message. May contain HTML."
          },
          "subject": {
            "type": "string",
            "description": "The subject/title of the message."
          }
        },
        "required": [
          "id",
          "subject",
          "status",
          "type"
        ]
      },
      "CreateMessage": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The title of the message.",
            "example": "Kickoff"
          },
          "content": {
            "type": "string",
            "description": "The body of the message. May contain HTML.",
            "example": "<div><strong>Welcome to Basecamp, everyone.</strong></div>"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "draft"
            ],
            "description": "Set to active to publish immediately.",
            "example": "active"
          },
          "category_id": {
            "type": "integer",
            "description": "Optional. The ID of the message type/category."
          },
          "subscriptions": {
            "type": "array",
            "description": "Optional. IDs of people to be notified of the new message.",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "subject",
          "status"
        ]
      },
      "UpdateMessage": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The title of the message.",
            "example": "Spin-down"
          },
          "content": {
            "type": "string",
            "description": "The body of the message. May contain HTML.",
            "example": "<div><strong>Oops, we lost that client.</strong></div>"
          },
          "category_id": {
            "type": "integer",
            "description": "Optional. The ID of the message type/category."
          }
        },
        "required": [
          "subject"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Document"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "comments_count": {
            "type": "integer"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Vault"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string",
            "description": "HTML content of the document"
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "status",
          "type"
        ]
      },
      "CreateDocument": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the document.",
            "example": "New Hire Info"
          },
          "content": {
            "type": "string",
            "description": "The content of the document. May contain HTML.",
            "example": "<div><strong>Getting started</strong></div>"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "draft"
            ],
            "description": "Set to active to publish immediately.",
            "example": "active"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "UpdateDocument": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the document.",
            "example": "New Hire Information"
          },
          "content": {
            "type": "string",
            "description": "The content of the document. May contain HTML.",
            "example": "<div><strong>Let's get started</strong></div>"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "Upload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Upload"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "comments_count": {
            "type": "integer"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Vault"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": "string",
            "description": "HTML description of the upload"
          },
          "content_type": {
            "type": "string",
            "description": "MIME type of the file"
          },
          "byte_size": {
            "type": "integer",
            "description": "Size of the file in bytes"
          },
          "filename": {
            "type": "string"
          },
          "download_url": {
            "type": "string",
            "format": "uri"
          },
          "app_download_url": {
            "type": "string",
            "format": "uri"
          },
          "width": {
            "type": "integer",
            "description": "Width of the image if applicable"
          },
          "height": {
            "type": "integer",
            "description": "Height of the image if applicable"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type",
          "filename"
        ]
      },
      "CreateUpload": {
        "type": "object",
        "properties": {
          "attachable_sgid": {
            "type": "string",
            "description": "The SGID for the attachment to upload. Obtained from the Create an attachment endpoint.",
            "example": "BAh2CEkiCGdpZAY6BkVUSSIsZ2lkOi7vYmMzL0F0dGFjaG1lbnQvNzM4NDcyNj9leHBpcmVzX2luBjsAVEkiDHB1cnBvc2UGOwBUSSIPYXR0YWNoYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=--13982201abe18044c897e32979c7dccfe8add9c1"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the upload. May contain HTML.",
            "example": "<div><strong>Yum</strong></div>"
          },
          "base_name": {
            "type": "string",
            "description": "Optional new base filename for the upload (without extension).",
            "example": "yummy_pizza"
          }
        },
        "required": [
          "attachable_sgid"
        ]
      },
      "UpdateUpload": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the upload. May contain HTML.",
            "example": "<div>Meh</div>"
          },
          "base_name": {
            "type": "string",
            "description": "New base filename for the upload (without extension).",
            "example": "old_pizza"
          }
        }
      },
      "Vault": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Vault"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Vault"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "documents_count": {
            "type": "integer"
          },
          "documents_url": {
            "type": "string",
            "format": "uri"
          },
          "uploads_count": {
            "type": "integer"
          },
          "uploads_url": {
            "type": "string",
            "format": "uri"
          },
          "vaults_count": {
            "type": "integer"
          },
          "vaults_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "type"
        ]
      },
      "CreateVault": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the vault.",
            "example": "Materials"
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdateVault": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the vault.",
            "example": "Important Materials"
          }
        },
        "required": [
          "title"
        ]
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Schedule"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "include_due_assignments": {
            "type": "boolean",
            "description": "Whether the schedule includes due dates from to-dos, cards and steps"
          },
          "entries_count": {
            "type": "integer",
            "description": "Number of entries in the schedule"
          },
          "entries_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to get schedule entries"
          }
        }
      },
      "ScheduleEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Schedule::Entry"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "comments_count": {
            "type": "integer"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Schedule"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "all_day": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "recurrence_schedule": {
            "$ref": "#/components/schemas/RecurrenceSchedule"
          }
        },
        "required": [
          "id",
          "summary",
          "starts_at",
          "ends_at",
          "status",
          "type"
        ]
      },
      "CreateScheduleEntry": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "Brief summary of what the schedule entry is about.",
            "example": "Important Meeting"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the schedule entry starts (ISO 8601).",
            "example": "2015-06-04T00:00:00Z"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the schedule entry ends (ISO 8601).",
            "example": "2015-06-04T02:00:00Z"
          },
          "description": {
            "type": "string",
            "description": "More detailed information about the schedule entry. May contain HTML.",
            "example": "<div>Quarterly planning meeting</div>"
          },
          "participant_ids": {
            "type": "array",
            "description": "IDs of people participating in this schedule entry.",
            "items": {
              "type": "integer"
            }
          },
          "all_day": {
            "type": "boolean",
            "description": "Whether the schedule entry should be an all-day event.",
            "example": false
          },
          "notify": {
            "type": "boolean",
            "description": "Whether to notify participants about the entry.",
            "example": false
          }
        },
        "required": [
          "summary",
          "starts_at",
          "ends_at"
        ]
      },
      "UpdateScheduleEntry": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "Brief summary of what the schedule entry is about.",
            "example": "All Day Meeting"
          },
          "starts_at": {
            "type": "string",
            "format": "date",
            "description": "When the schedule entry starts (date for all-day events).",
            "example": "2015-06-04"
          },
          "ends_at": {
            "type": "string",
            "format": "date",
            "description": "When the schedule entry ends (date for all-day events).",
            "example": "2015-06-04"
          },
          "description": {
            "type": "string",
            "description": "More detailed information about the schedule entry. May contain HTML."
          },
          "participant_ids": {
            "type": "array",
            "description": "IDs of people participating in this schedule entry.",
            "items": {
              "type": "integer"
            }
          },
          "all_day": {
            "type": "boolean",
            "description": "Whether the schedule entry should be an all-day event.",
            "example": true
          },
          "notify": {
            "type": "boolean",
            "description": "Whether to notify participants about the entry."
          }
        }
      },
      "RecurrenceSchedule": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "enum": [
              "every_day",
              "every_week",
              "every_month",
              "every_year"
            ],
            "description": "How often the schedule entry recurs.",
            "example": "every_month"
          },
          "days": {
            "type": "array",
            "description": "The days of the month or week when the entry recurs.",
            "items": {
              "type": "integer"
            },
            "example": [
              1
            ]
          },
          "hour": {
            "type": "integer",
            "description": "The hour when the entry starts.",
            "example": 10
          },
          "minute": {
            "type": "integer",
            "description": "The minute when the entry starts.",
            "example": 30
          },
          "week_instance": {
            "type": "integer",
            "description": "For monthly recurrences, specifies which week instance of the month.",
            "example": 3
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the recurrence starts.",
            "example": "2019-02-18"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the recurrence ends.",
            "example": "2019-10-25"
          }
        }
      },
      "Questionnaire": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Questionnaire"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "name": {
            "type": "string"
          },
          "questions_count": {
            "type": "integer"
          },
          "questions_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "type"
        ]
      },
      "Question": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Question"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Questionnaire"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "frequency": {
                "type": "string",
                "enum": [
                  "every_day",
                  "every_week",
                  "every_month",
                  "every_year",
                  "one_time"
                ]
              },
              "days": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "hour": {
                "type": "integer"
              },
              "minute": {
                "type": "integer"
              },
              "start_date": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "presenting_group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "presenting_group_json": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "answers_count": {
            "type": "integer"
          },
          "answers_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "status",
          "content",
          "type"
        ]
      },
      "CreateQuestion": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The text of the question"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "frequency": {
                "type": "string",
                "enum": [
                  "every_day",
                  "every_week",
                  "every_month",
                  "every_year",
                  "one_time"
                ]
              },
              "days": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Days of week (1-7) or month (1-31) depending on frequency"
              },
              "hour": {
                "type": "integer",
                "description": "Hour to ask the question (0-23)"
              },
              "minute": {
                "type": "integer",
                "description": "Minute to ask the question (0-59)"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "Date to start asking the question (ISO 8601)"
              }
            }
          },
          "presenting_group_json": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of person IDs who will be asked to answer"
          }
        },
        "required": [
          "content",
          "schedule"
        ]
      },
      "UpdateQuestion": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The text of the question"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "frequency": {
                "type": "string",
                "enum": [
                  "every_day",
                  "every_week",
                  "every_month",
                  "every_year",
                  "one_time"
                ]
              },
              "days": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Days of week (1-7) or month (1-31) depending on frequency"
              },
              "hour": {
                "type": "integer",
                "description": "Hour to ask the question (0-23)"
              },
              "minute": {
                "type": "integer",
                "description": "Minute to ask the question (0-59)"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "Date to start asking the question (ISO 8601)"
              }
            }
          },
          "presenting_group_json": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of person IDs who will be asked to answer"
          }
        },
        "required": [
          "content"
        ]
      },
      "QuestionAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Question::Answer"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Question"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          },
          "formatted_content": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "content",
          "type"
        ]
      },
      "ClientApproval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Client::Approval"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Client::Board"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "due_on": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "replies_count": {
            "type": "integer"
          },
          "replies_url": {
            "type": "string",
            "format": "uri"
          },
          "approval_status": {
            "type": "string",
            "enum": [
              "pending",
              "approved",
              "rejected"
            ]
          },
          "approver": {
            "$ref": "#/components/schemas/Person"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientApprovalResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "title",
          "type",
          "approval_status"
        ]
      },
      "ClientApprovalResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Client::Approval::Response"
            ]
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Client::Approval"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Project"
                ]
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "content": {
            "type": "string"
          },
          "approved": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "status",
          "content",
          "type",
          "approved"
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "payload_url": {
            "type": "string",
            "format": "uri"
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "active",
          "payload_url",
          "types"
        ]
      },
      "WebhookWithDeliveries": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Webhook"
          },
          {
            "type": "object",
            "properties": {
              "recent_deliveries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebhookDelivery"
                },
                "description": "25 most recent delivery exchanges, sorted with most recent first"
              }
            }
          }
        ]
      },
      "WebhookDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "request": {
            "type": "object",
            "properties": {
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "body": {
                "$ref": "#/components/schemas/WebhookEvent"
              }
            }
          },
          "response": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer"
              },
              "headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "message": {
                "type": "string"
              },
              "body": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "request",
          "response"
        ]
      },
      "WebhookEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "kind": {
            "type": "string",
            "description": "Type of event (e.g., message_created, todo_completed)"
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "recording": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "status": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "title": {
                "type": "string"
              },
              "inherits_status": {
                "type": "boolean"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              },
              "comments_count": {
                "type": "integer"
              },
              "comments_url": {
                "type": "string",
                "format": "uri"
              },
              "parent": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "title": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "app_url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              },
              "bucket": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              },
              "content": {
                "type": "string"
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "CreateWebhook": {
        "type": "object",
        "properties": {
          "payload_url": {
            "type": "string",
            "format": "uri",
            "description": "The HTTPS URL that Basecamp will call when a matching event occurs.",
            "example": "https://example.com/endpoint"
          },
          "types": {
            "type": "array",
            "description": "The types of events that will trigger this webhook.",
            "items": {
              "type": "string",
              "enum": [
                "all",
                "Comment",
                "Client::Approval::Response",
                "Client::Forward",
                "Client::Reply",
                "CloudFile",
                "Document",
                "GoogleDocument",
                "Inbox::Forward",
                "Message",
                "Question",
                "Question::Answer",
                "Schedule::Entry",
                "Todo",
                "Todolist",
                "Upload",
                "Vault"
              ]
            },
            "example": [
              "Todo",
              "Todolist"
            ]
          }
        },
        "required": [
          "payload_url"
        ]
      },
      "UpdateWebhook": {
        "type": "object",
        "properties": {
          "payload_url": {
            "type": "string",
            "format": "uri",
            "description": "The HTTPS URL that Basecamp will call when a matching event occurs.",
            "example": "https://example.com/endpoint"
          },
          "types": {
            "type": "array",
            "description": "The types of events that will trigger this webhook.",
            "items": {
              "type": "string",
              "enum": [
                "all",
                "Comment",
                "Client::Approval::Response",
                "Client::Forward",
                "Client::Reply",
                "CloudFile",
                "Document",
                "GoogleDocument",
                "Inbox::Forward",
                "Message",
                "Question",
                "Question::Answer",
                "Schedule::Entry",
                "Todo",
                "Todolist",
                "Upload",
                "Vault"
              ]
            },
            "example": [
              "Todo",
              "Todolist"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Whether this webhook should be active.",
            "example": true
          }
        },
        "required": [
          "payload_url"
        ]
      },
      "CardTable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "bucket": {
            "$ref": "#/components/schemas/Bucket"
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1069482092
          },
          "status": {
            "type": "string",
            "example": "active"
          },
          "visible_to_clients": {
            "type": "boolean",
            "example": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-18T09:51:27.242Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-18T09:51:41.806Z"
          },
          "title": {
            "type": "string",
            "example": "Triage"
          },
          "inherits_status": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "example": "Kanban::Triage"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://3.basecampapi.com/195539477/buckets/2085958499/card_tables/columns/1069482092.json"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "example": "https://3.basecamp.com/195539477/buckets/2085958499/card_tables/columns/1069482092"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "example": "https://3.basecampapi.com/195539477/my/bookmarks/BAh7CEkiCGdpZAY6BkVUSSIuZ2lkOi8vYmMzL1JlY29yZGluZy8xMDY5NDgyMDkyP2V4cGlyZXNfaW4GOwBUSSIMcHVycG9zZQY7AFRJIg1yZWFkYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=--4e5003c6ebe9d448a770f00a1b3da52b6f668c65.json"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1069482091
              },
              "title": {
                "type": "string",
                "example": "Card Table"
              },
              "type": {
                "type": "string",
                "example": "Kanban::Board"
              },
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://3.basecampapi.com/195539477/buckets/2085958499/card_tables/1069482091.json"
              },
              "app_url": {
                "type": "string",
                "format": "uri",
                "example": "https://3.basecamp.com/195539477/buckets/2085958499/card_tables/1069482091"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 2085958499
              },
              "name": {
                "type": "string",
                "example": "The Leto Laptop"
              },
              "type": {
                "type": "string",
                "example": "Project"
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "color": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "white",
              "red",
              "orange",
              "yellow",
              "green",
              "blue",
              "aqua",
              "purple",
              "gray",
              "pink",
              "brown"
            ]
          },
          "cards_count": {
            "type": "integer",
            "example": 1
          },
          "comment_count": {
            "type": "integer",
            "example": 0
          },
          "cards_url": {
            "type": "string",
            "format": "uri",
            "example": "https://3.basecampapi.com/195539477/buckets/2085958499/card_tables/lists/1069482092/cards.json"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri"
          },
          "comments_count": {
            "type": "integer"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "due_on": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "completion_subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "completion_url": {
            "type": "string",
            "format": "uri"
          },
          "comment_count": {
            "type": "integer"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Step"
            }
          }
        }
      },
      "Step": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "visible_to_clients": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          },
          "inherits_status": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri"
          },
          "position": {
            "type": "integer"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "creator": {
            "$ref": "#/components/schemas/Person"
          },
          "completed": {
            "type": "boolean"
          },
          "due_on": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "completion_url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "app_url": {
            "type": "string",
            "format": "uri"
          },
          "dock": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "position": {
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "app_url": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      },
      "ProjectConstruction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "project": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "status": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "purpose": {
                "type": "string"
              },
              "clients_enabled": {
                "type": "boolean"
              },
              "bookmark_url": {
                "type": "string",
                "format": "uri"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "app_url": {
                "type": "string",
                "format": "uri"
              },
              "dock": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "position": {
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "app_url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AttachmentResponse": {
        "type": "object",
        "required": [
          "attachable_sgid"
        ],
        "properties": {
          "attachable_sgid": {
            "type": "string",
            "description": "Global unique identifier for the attachment that can be used in other endpoints"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "subscribed": {
            "type": "boolean",
            "description": "Whether the current user is subscribed"
          },
          "count": {
            "type": "integer",
            "description": "Number of subscribers"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL for managing subscriptions"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "List of subscribers"
          }
        }
      },
      "LineupMarker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the marker"
          },
          "name": {
            "type": "string",
            "description": "The name of the marker"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date for the marker in ISO8601 format (without time part)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the marker was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the marker was last updated"
          }
        }
      },
      "CreateLineupMarker": {
        "type": "object",
        "required": [
          "name",
          "date"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the marker"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date for the marker in ISO8601 format (without time part)"
          }
        }
      },
      "UpdateLineupMarker": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the marker"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date for the marker in ISO8601 format (without time part)"
          }
        }
      },
      "Chatbot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the chatbot"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the chatbot was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the chatbot was last updated"
          },
          "service_name": {
            "type": "string",
            "description": "The name of the chatbot service used for invocation"
          },
          "command_url": {
            "type": [
              "string",
              "null"
            ],
            "format": "uri",
            "description": "The HTTPS URL that Basecamp should call when the bot is addressed"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The API URL for the chatbot"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "The web URL for the chatbot in Basecamp"
          },
          "lines_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to post messages as the chatbot"
          }
        }
      },
      "CreateChatbot": {
        "type": "object",
        "required": [
          "service_name"
        ],
        "properties": {
          "service_name": {
            "type": "string",
            "description": "The name of the chatbot service, which will be used to invoke queries and commands. \nNo spaces, emoji or non-word characters are allowed.\n"
          },
          "command_url": {
            "type": "string",
            "format": "uri",
            "description": "The HTTPS URL that Basecamp should call when the bot is addressed"
          }
        }
      },
      "UpdateChatbot": {
        "type": "object",
        "required": [
          "service_name"
        ],
        "properties": {
          "service_name": {
            "type": "string",
            "description": "The name of the chatbot service, which will be used to invoke queries and commands. \nNo spaces, emoji or non-word characters are allowed.\n"
          },
          "command_url": {
            "type": "string",
            "format": "uri",
            "description": "The HTTPS URL that Basecamp should call when the bot is addressed"
          }
        }
      },
      "CreateChatbotLine": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The body for the Campfire line. HTML formatting is supported including additional tags \nfor chatbot lines: table, tr, td, th, thead, tbody, details, and summary.\n"
          }
        }
      },
      "ClientCorrespondence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the client correspondence"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "The status of the correspondence"
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the correspondence is visible to clients"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the correspondence was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the correspondence was last updated"
          },
          "title": {
            "type": "string",
            "description": "The title of the correspondence"
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the correspondence inherits its status from its parent"
          },
          "type": {
            "type": "string",
            "description": "The type of the recording",
            "example": "Client::Correspondence"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The API URL for the correspondence"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "The web URL for the correspondence in Basecamp"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to bookmark the correspondence"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to subscribe to the correspondence"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "bucket": {
            "$ref": "#/components/schemas/client_correspondences_Bucket"
          },
          "creator": {
            "$ref": "#/components/schemas/Creator"
          },
          "content": {
            "type": "string",
            "description": "The rich text content of the correspondence in HTML format"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the correspondence"
          },
          "replies_count": {
            "type": "integer",
            "description": "The number of replies to the correspondence"
          },
          "replies_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to get replies to the correspondence"
          }
        }
      },
      "ClientReply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the client reply"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "The status of the reply"
          },
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the reply is visible to clients"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the reply was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the reply was last updated"
          },
          "title": {
            "type": "string",
            "description": "The title of the reply"
          },
          "inherits_status": {
            "type": "boolean",
            "description": "Whether the reply inherits its status from its parent"
          },
          "type": {
            "type": "string",
            "description": "The type of the recording",
            "example": "Client::Reply"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The API URL for the reply"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "The web URL for the reply in Basecamp"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to bookmark the reply"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the parent recording"
              },
              "title": {
                "type": "string",
                "description": "The title of the parent recording"
              },
              "type": {
                "type": "string",
                "description": "The type of the parent recording",
                "example": "Client::Correspondence"
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "The API URL for the parent recording"
              },
              "app_url": {
                "type": "string",
                "format": "uri",
                "description": "The web URL for the parent recording in Basecamp"
              }
            }
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the bucket (project)"
              },
              "name": {
                "type": "string",
                "description": "The name of the bucket (project)"
              },
              "type": {
                "type": "string",
                "description": "The type of the bucket",
                "example": "Project"
              }
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the creator"
              },
              "attachable_sgid": {
                "type": "string",
                "description": "The globally unique identifier for attaching the creator in rich text"
              },
              "name": {
                "type": "string",
                "description": "The name of the creator"
              },
              "email_address": {
                "type": "string",
                "format": "email",
                "description": "The email address of the creator"
              },
              "personable_type": {
                "type": "string",
                "description": "The type of person",
                "example": "User"
              },
              "title": {
                "type": "string",
                "description": "The job title of the creator"
              },
              "bio": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The biography of the creator"
              },
              "location": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The location of the creator"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the creator was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the creator was last updated"
              },
              "admin": {
                "type": "boolean",
                "description": "Whether the creator is an admin"
              },
              "owner": {
                "type": "boolean",
                "description": "Whether the creator is an owner"
              },
              "client": {
                "type": "boolean",
                "description": "Whether the creator is a client"
              },
              "employee": {
                "type": "boolean",
                "description": "Whether the creator is an employee"
              },
              "time_zone": {
                "type": "string",
                "description": "The time zone of the creator"
              },
              "avatar_url": {
                "type": "string",
                "format": "uri",
                "description": "The URL for the creator's avatar"
              },
              "company": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier for the company"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the company"
                  }
                }
              },
              "can_manage_projects": {
                "type": "boolean",
                "description": "Whether the creator can manage projects"
              },
              "can_manage_people": {
                "type": "boolean",
                "description": "Whether the creator can manage people"
              }
            }
          },
          "content": {
            "type": "string",
            "description": "The rich text content of the reply in HTML format"
          }
        }
      },
      "ClientVisibility": {
        "type": "object",
        "required": [
          "visible_to_clients"
        ],
        "properties": {
          "visible_to_clients": {
            "type": "boolean",
            "description": "Whether the recording should be visible to clients"
          }
        }
      },
      "Recording": {
        "type": "object",
        "description": "A generic recording object that represents various Basecamp data structures",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the recording"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "archived",
              "trashed"
            ],
            "description": "The status of the recording"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the recording was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the recording was last updated"
          },
          "title": {
            "type": "string",
            "description": "The title of the recording"
          },
          "type": {
            "type": "string",
            "description": "The type of the recording",
            "example": "Todo, Comment, Document"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The API URL for the recording"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "The web URL for the recording in Basecamp"
          },
          "bookmark_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to bookmark the recording"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to subscribe to the recording"
          },
          "bucket": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the bucket (project)"
              },
              "name": {
                "type": "string",
                "description": "The name of the bucket (project)"
              },
              "type": {
                "type": "string",
                "description": "The type of the bucket",
                "example": "Project"
              }
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the event"
          },
          "recording_id": {
            "type": "integer",
            "description": "The ID of the recording that this event belongs to"
          },
          "action": {
            "type": "string",
            "description": "The type of action that occurred",
            "example": "created, assignment_changed, completed, uncompleted"
          },
          "details": {
            "type": "object",
            "description": "Additional details about the event, varies based on the action type",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the event occurred"
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the creator"
              },
              "attachable_sgid": {
                "type": "string",
                "description": "The globally unique identifier for attaching the creator in rich text"
              },
              "name": {
                "type": "string",
                "description": "The name of the creator"
              },
              "email_address": {
                "type": "string",
                "format": "email",
                "description": "The email address of the creator"
              },
              "personable_type": {
                "type": "string",
                "description": "The type of person",
                "example": "User"
              },
              "title": {
                "type": "string",
                "description": "The job title of the creator"
              },
              "bio": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The biography of the creator"
              },
              "location": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The location of the creator"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the creator was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the creator was last updated"
              },
              "admin": {
                "type": "boolean",
                "description": "Whether the creator is an admin"
              },
              "owner": {
                "type": "boolean",
                "description": "Whether the creator is an owner"
              },
              "client": {
                "type": "boolean",
                "description": "Whether the creator is a client"
              },
              "employee": {
                "type": "boolean",
                "description": "Whether the creator is an employee"
              },
              "time_zone": {
                "type": "string",
                "description": "The time zone of the creator"
              },
              "avatar_url": {
                "type": "string",
                "format": "uri",
                "description": "The URL for the creator's avatar"
              },
              "company": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier for the company"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the company"
                  }
                }
              },
              "can_manage_projects": {
                "type": "boolean",
                "description": "Whether the creator can manage projects"
              },
              "can_manage_people": {
                "type": "boolean",
                "description": "Whether the creator can manage people"
              }
            }
          }
        }
      },
      "CreateCampfireLine": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The text content of the campfire line"
          }
        },
        "required": [
          "content"
        ]
      },
      "Parent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the parent"
          },
          "title": {
            "type": "string",
            "description": "The title of the parent"
          },
          "type": {
            "type": "string",
            "description": "The type of the parent",
            "example": "Client::Board"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The API URL for the parent"
          },
          "app_url": {
            "type": "string",
            "format": "uri",
            "description": "The web URL for the parent in Basecamp"
          }
        }
      },
      "client_correspondences_Bucket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the bucket (project)"
          },
          "name": {
            "type": "string",
            "description": "The name of the bucket (project)"
          },
          "type": {
            "type": "string",
            "description": "The type of the bucket",
            "example": "Project"
          }
        }
      },
      "Creator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the creator"
          },
          "attachable_sgid": {
            "type": "string",
            "description": "The globally unique identifier for attaching the creator in rich text"
          },
          "name": {
            "type": "string",
            "description": "The name of the creator"
          },
          "email_address": {
            "type": "string",
            "format": "email",
            "description": "The email address of the creator"
          },
          "personable_type": {
            "type": "string",
            "description": "The type of person",
            "example": "User"
          },
          "title": {
            "type": "string",
            "description": "The job title of the creator"
          },
          "bio": {
            "type": [
              "string",
              "null"
            ],
            "description": "The biography of the creator"
          },
          "location": {
            "type": [
              "string",
              "null"
            ],
            "description": "The location of the creator"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the creator was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the creator was last updated"
          },
          "admin": {
            "type": "boolean",
            "description": "Whether the creator is an admin"
          },
          "owner": {
            "type": "boolean",
            "description": "Whether the creator is an owner"
          },
          "client": {
            "type": "boolean",
            "description": "Whether the creator is a client"
          },
          "employee": {
            "type": "boolean",
            "description": "Whether the creator is an employee"
          },
          "time_zone": {
            "type": "string",
            "description": "The time zone of the creator"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL for the creator's avatar"
          },
          "company": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the company"
              },
              "name": {
                "type": "string",
                "description": "The name of the company"
              }
            }
          },
          "can_manage_projects": {
            "type": "boolean",
            "description": "Whether the creator can manage projects"
          },
          "can_manage_people": {
            "type": "boolean",
            "description": "Whether the creator can manage peoplenage people"
          }
        }
      },
      "NewPerson": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new person"
          },
          "email_address": {
            "type": "string",
            "description": "Email address of the new person"
          },
          "title": {
            "type": "string",
            "description": "Job title of the new person (optional)"
          },
          "company_name": {
            "type": "string",
            "description": "Company name of the new person (optional)"
          }
        }
      },
      "PeopleAccessUpdate": {
        "type": "object",
        "properties": {
          "grant": {
            "type": "array",
            "description": "Array of people IDs to be granted access",
            "items": {
              "type": "integer"
            }
          },
          "revoke": {
            "type": "array",
            "description": "Array of people IDs to be revoked access",
            "items": {
              "type": "integer"
            }
          },
          "create": {
            "type": "array",
            "description": "Array of new people to be created",
            "items": {
              "$ref": "#/components/schemas/NewPerson"
            }
          }
        }
      },
      "PeopleAccessResponse": {
        "type": "object",
        "properties": {
          "granted": {
            "type": "array",
            "description": "Array of people who were granted access",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "revoked": {
            "type": "array",
            "description": "Array of people who were revoked access",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "CreateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new project.",
            "example": "New Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the new project."
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project.",
            "example": "Updated Project Name"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the project.",
            "example": "For Client: Xyz Corp Conference"
          },
          "admissions": {
            "type": "string",
            "description": "Specifies access policy for the project within the same account.",
            "enum": [
              "invite",
              "employee",
              "team"
            ],
            "example": "team"
          },
          "schedule_attributes": {
            "type": "object",
            "description": "Optional schedule attributes for the project.",
            "properties": {
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "Project start date (ISO 8601). If provided, end_date is also required.",
                "example": "2022-01-01"
              },
              "end_date": {
                "type": "string",
                "format": "date",
                "description": "Project end date (ISO 8601). If provided, start_date is also required.",
                "example": "2022-04-01"
              }
            },
            "required": [
              "start_date",
              "end_date"
            ]
          }
        },
        "required": [
          "name"
        ]
      }
    }
  }
}